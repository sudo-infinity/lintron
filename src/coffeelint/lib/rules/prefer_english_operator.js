// Generated by CoffeeScript 1.7.1
(function() {
  var RuleProcessor;

  module.exports = RuleProcessor = (function() {
    function RuleProcessor() {}

    RuleProcessor.prototype.rule = {
      name: 'prefer_english_operator',
      description: 'This rule prohibits &&, ||, ==, != and !.\nUse and, or, is, isnt, and not instead.\n!! for converting to a boolean is ignored.',
      level: 'ignore',
      doubleNotLevel: 'ignore',
      message: 'Don\'t use &&, ||, ==, !=, or !'
    };

    RuleProcessor.prototype.tokens = ['COMPARE', 'UNARY_MATH', 'LOGIC'];

    RuleProcessor.prototype.lintToken = function(token, tokenApi) {
      var actual_token, config, context, first_column, last_column, level, line, _ref;
      config = tokenApi.config[this.rule.name];
      level = config.level;
      _ref = token[2], first_column = _ref.first_column, last_column = _ref.last_column;
      line = tokenApi.lines[tokenApi.lineNumber];
      actual_token = line.slice(first_column, +last_column + 1 || 9e9);
      context = (function() {
        var _ref1, _ref2;
        switch (actual_token) {
          case '==':
            return 'Replace "==" with "is"';
          case '!=':
            return 'Replace "!=" with "isnt"';
          case '||':
            return 'Replace "||" with "or"';
          case '&&':
            return 'Replace "&&" with "and"';
          case '!':
            if (((_ref1 = tokenApi.peek(1)) != null ? _ref1[0] : void 0) === 'UNARY_MATH') {
              level = config.doubleNotLevel;
              return '"?" is usually better than "!!"';
            } else if (((_ref2 = tokenApi.peek(-1)) != null ? _ref2[0] : void 0) === 'UNARY_MATH') {
              return void 0;
            } else {
              return 'Replace "!" with "not"';
            }
            break;
          default:
            return void 0;
        }
      })();
      if (context != null) {
        return {
          level: level,
          context: context
        };
      }
    };

    return RuleProcessor;

  })();

}).call(this);
