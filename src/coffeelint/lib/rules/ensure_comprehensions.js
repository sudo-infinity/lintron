// Generated by CoffeeScript 1.7.1
(function() {
  var EnsureComprehensions,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module.exports = EnsureComprehensions = (function() {
    function EnsureComprehensions() {}

    EnsureComprehensions.prototype.rule = {
      name: 'ensure_comprehensions',
      level: 'warn',
      message: 'Comprehensions must have parentheses around them',
      description: 'This rule makes sure that parentheses are around comprehensions.'
    };

    EnsureComprehensions.prototype.tokens = ['FOR'];

    EnsureComprehensions.prototype.lintToken = function(token, tokenApi) {
      var atEqual, idents, peeker, prevIdents, prevToken, _ref, _ref1;
      idents = this.findIdents(tokenApi);
      peeker = -1;
      atEqual = false;
      prevIdents = [];
      while ((prevToken = tokenApi.peek(peeker))) {
        if (prevToken[0] === 'IDENTIFIER') {
          if (!atEqual) {
            prevIdents.push(prevToken[1]);
          } else if (_ref = prevToken[1], __indexOf.call(idents, _ref) >= 0) {
            return;
          }
        }
        if (((_ref1 = prevToken[0]) === '(' || _ref1 === '->' || _ref1 === 'TERMINATOR') || (prevToken.newLine != null)) {
          break;
        }
        if (prevToken[0] === '=') {
          atEqual = true;
        }
        peeker--;
      }
      if (atEqual && prevIdents.length > 0) {
        return {
          context: ''
        };
      }
    };

    EnsureComprehensions.prototype.findIdents = function(tokenApi) {
      var idents, nextToken, peeker, _ref;
      peeker = 1;
      idents = [];
      while ((nextToken = tokenApi.peek(peeker))) {
        if (nextToken[0] === 'IDENTIFIER') {
          idents.push(nextToken[1]);
        }
        if ((_ref = nextToken[0]) === 'FORIN' || _ref === 'FOROF') {
          break;
        }
        peeker++;
      }
      return idents;
    };

    return EnsureComprehensions;

  })();

}).call(this);
