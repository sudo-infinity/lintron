// Generated by CoffeeScript 1.7.1
(function() {
  var NoImplicitBraces;

  module.exports = NoImplicitBraces = (function() {
    NoImplicitBraces.prototype.rule = {
      name: 'no_implicit_braces',
      level: 'ignore',
      message: 'Implicit braces are forbidden',
      strict: true,
      description: 'This rule prohibits implicit braces when declaring object literals.\nImplicit braces can make code more difficult to understand,\nespecially when used in combination with optional parenthesis.\n<pre>\n<code># Do you find this code ambiguous? Is it a\n# function call with three arguments or four?\nmyFunction a, b, 1:2, 3:4\n\n# While the same code written in a more\n# explicit manner has no ambiguity.\nmyFunction(a, b, {1:2, 3:4})\n</code>\n</pre>\nImplicit braces are permitted by default, since their use is\nidiomatic CoffeeScript.'
    };

    NoImplicitBraces.prototype.tokens = ['{', 'OUTDENT', 'CLASS'];

    function NoImplicitBraces() {
      this.isClass = false;
      this.classBrace = false;
    }

    NoImplicitBraces.prototype.lintToken = function(token, tokenApi) {
      var lineNum, previousToken, type, val;
      type = token[0], val = token[1], lineNum = token[2];
      if (type === 'OUTDENT' || type === 'CLASS') {
        return this.trackClass.apply(this, arguments);
      }
      if (token.generated) {
        if (this.classBrace) {
          this.classBrace = false;
          return;
        }
        if (!tokenApi.config[this.rule.name].strict) {
          previousToken = tokenApi.peek(-1)[0];
          if (previousToken === 'INDENT') {
            return;
          }
        }
        return true;
      }
    };

    NoImplicitBraces.prototype.trackClass = function(token, tokenApi) {
      var ln, n0, n1, _ref, _ref1, _ref2;
      _ref = [token, tokenApi.peek()], (_ref1 = _ref[0], n0 = _ref1[0], ln = _ref1[_ref1.length - 1]), (_ref2 = _ref[1], n1 = _ref2[0]);
      if (n0 === 'OUTDENT' && n1 === 'TERMINATOR') {
        this.isClass = false;
        this.classBrace = false;
      }
      if (n0 === 'CLASS') {
        this.isClass = true;
        this.classBrace = true;
      }
      return null;
    };

    return NoImplicitBraces;

  })();

}).call(this);
