// Generated by CoffeeScript 1.7.1
(function() {
  var ErrorReport;

  module.exports = ErrorReport = (function() {
    function ErrorReport(coffeelint) {
      this.coffeelint = coffeelint;
      this.paths = {};
    }

    ErrorReport.prototype.lint = function(filename, source, config, literate) {
      if (config == null) {
        config = {};
      }
      if (literate == null) {
        literate = false;
      }
      return this.paths[filename] = this.coffeelint.lint(source, config, literate);
    };

    ErrorReport.prototype.getExitCode = function() {
      var path;
      for (path in this.paths) {
        if (this.pathHasError(path)) {
          return 1;
        }
      }
      return 0;
    };

    ErrorReport.prototype.getSummary = function() {
      var error, errorCount, errors, path, pathCount, warningCount, _i, _len, _ref;
      pathCount = errorCount = warningCount = 0;
      _ref = this.paths;
      for (path in _ref) {
        errors = _ref[path];
        pathCount++;
        for (_i = 0, _len = errors.length; _i < _len; _i++) {
          error = errors[_i];
          if (error.level === 'error') {
            errorCount++;
          }
          if (error.level === 'warn') {
            warningCount++;
          }
        }
      }
      return {
        errorCount: errorCount,
        warningCount: warningCount,
        pathCount: pathCount
      };
    };

    ErrorReport.prototype.getErrors = function(path) {
      return this.paths[path];
    };

    ErrorReport.prototype.pathHasWarning = function(path) {
      return this._hasLevel(path, 'warn');
    };

    ErrorReport.prototype.pathHasError = function(path) {
      return this._hasLevel(path, 'error');
    };

    ErrorReport.prototype.hasError = function() {
      var path;
      for (path in this.paths) {
        if (this.pathHasError(path)) {
          return true;
        }
      }
      return false;
    };

    ErrorReport.prototype._hasLevel = function(path, level) {
      var error, _i, _len, _ref;
      _ref = this.paths[path];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        error = _ref[_i];
        if (error.level === level) {
          return true;
        }
      }
      return false;
    };

    return ErrorReport;

  })();

}).call(this);
